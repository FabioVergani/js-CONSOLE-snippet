<html><head>
<style>
.highlight.javascript > code {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	margin: auto;
	padding: 0px;
	border-radius: 2px;
	font-size: inherit;
	vertical-align: 0em;
	max-width: 100%;
	line-height: 1.6em;
}

.highlight.javascript > code {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	margin: auto;
	padding: 0px;
	border-radius: 2px;
	font-size: inherit;
	vertical-align: 0em;
	max-width: 100%;
	line-height: 1.6em;
}

.highlight.javascript > code {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	margin: auto;
	padding: 0px;
	border-radius: 2px;
	font-size: inherit;
	vertical-align: 0em;
	max-width: 100%;
	line-height: 1.6em;
}

.highlight.javascript > code {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	margin: auto;
	padding: 0px;
	border-radius: 2px;
	font-size: inherit;
	vertical-align: 0em;
	max-width: 100%;
	line-height: 1.6em;
}

.highlight.javascript > code {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	margin: auto;
	padding: 0px;
	border-radius: 2px;
	font-size: inherit;
	vertical-align: 0em;
	max-width: 100%;
	line-height: 1.6em;
}

.highlight.javascript > code {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	margin: auto;
	padding: 0px;
	border-radius: 2px;
	font-size: inherit;
	vertical-align: 0em;
	max-width: 100%;
	line-height: 1.6em;
}

.highlight.javascript > code {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	margin: auto;
	padding: 0px;
	border-radius: 2px;
	font-size: inherit;
	vertical-align: 0em;
	max-width: 100%;
	line-height: 1.6em;
}

.highlight {
	background: rgb(41, 41, 46);
	color: rgb(248, 248, 242);
	font-family: Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif;
	font-size: 21px;
}

.highlight.javascript {
	background-image: initial;
	background-position: initial;
	background-size: initial;
	background-repeat: initial;
	background-attachment: initial;
	background-origin: initial;
	background-clip: initial;
	padding: 43.2813px 14.4219px 43.2813px 64.9375px;
	font-size: 0.7em;
	border-radius: 0px;
	overflow-x: auto;
	color: rgb(239, 240, 249);
	line-height: 1.42em;
	width: 800.969px;
	margin-left: -79.375px;
	overflow-wrap: normal;
}

.p {
	color: rgb(248, 248, 242);
}

.mi {
	color: rgb(174, 129, 255);
}

.o {
	color: rgb(249, 38, 114);
}

.c1 {
	color: rgb(117, 113, 94);
}

.mf {
	color: rgb(174, 129, 255);
}

.s2 {
	color: rgb(230, 219, 116);
}

.kc {
	color: rgb(102, 217, 239);
}

.k {
	color: rgb(102, 217, 239);
}

.s1 {
	color: rgb(230, 219, 116);
}

.kd {
	color: rgb(102, 217, 239);
}

.anchor {
	color: rgb(85, 125, 232);
	text-decoration-line: none;
	padding-top: 50px;
	margin-top: -50px;
	display: block;
	visibility: hidden;
	background-clip: content-box;
}

.nx {
	color: rgb(166, 226, 46);
}

.nb {
	color: rgb(248, 248, 242);
}

.mh {
	color: rgb(174, 129, 255);
}

.err {
	color: rgb(150, 0, 80);
	background-color: rgb(30, 0, 16);
}
</style>
</head><body><h5 ><code >| 0</code>&nbsp;is an easy and fast way to convert anything to integer:</h5><div class="highlight" ><pre class="highlight javascript" ><code ><span class="p" >(</span> <span class="mi" >3</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >3</span><span class="p" >;</span>                 <span class="c1" >// it does not change integers</span>
<span class="p" >(</span> <span class="mf" >3.3</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >3</span><span class="p" >;</span>               <span class="c1" >// it casts off the fractional part in fractionalal numbers</span>
<span class="p" >(</span> <span class="mf" >3.8</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >3</span><span class="p" >;</span>               <span class="c1" >// it does not round, but exactly casts off the fractional part</span>
<span class="p" >(</span> <span class="o" >-</span><span class="mf" >3.3</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="o" >-</span><span class="mi" >3</span><span class="p" >;</span>             <span class="c1" >// including negative fractional numbers</span>
<span class="p" >(</span> <span class="o" >-</span><span class="mf" >3.8</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="o" >-</span><span class="mi" >3</span><span class="p" >;</span>             <span class="c1" >// which have Math.floor(-3.3) == Math.floor(-3.8) == -4</span>
<span class="p" >(</span> <span class="s2" >"3"</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >3</span><span class="p" >;</span>               <span class="c1" >// strings with numbers are typecast to integers</span>
<span class="p" >(</span> <span class="s2" >"3.8"</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >3</span><span class="p" >;</span>             <span class="c1" >// during this the fractional part is cast off too</span>
<span class="p" >(</span> <span class="s2" >"-3.8"</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="o" >-</span><span class="mi" >3</span><span class="p" >;</span>           <span class="c1" >// including negative fractional numbers</span>
<span class="p" >(</span> <span class="kc" >NaN</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>               <span class="c1" >// NaN is typecast to 0</span>
<span class="p" >(</span> <span class="kc" >Infinity</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>          <span class="c1" >// the typecast to 0 occurs with the Infinity</span>
<span class="p" >(</span> <span class="o" >-</span><span class="kc" >Infinity</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>         <span class="c1" >// and with -Infinity</span>
<span class="p" >(</span> <span class="kc" >null</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>              <span class="c1" >// and with null,</span>
<span class="p" >(</span> <span class="p" >(</span><span class="k" >void</span> <span class="mi" >0</span><span class="p" >)</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>          <span class="c1" >// and with undefined</span>
<span class="p" >(</span> <span class="p" >[]</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>                <span class="c1" >// and with an empty array</span>
<span class="p" >(</span> <span class="p" >[</span><span class="mi" >3</span><span class="p" >]</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >3</span><span class="p" >;</span>               <span class="c1" >// but an array with one number is typecast to number</span>
<span class="p" >(</span> <span class="p" >[</span><span class="o" >-</span><span class="mf" >3.8</span><span class="p" >]</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="o" >-</span><span class="mi" >3</span><span class="p" >;</span>           <span class="c1" >// including the cast off of the fractional part</span>
<span class="p" >(</span> <span class="p" >[</span><span class="s2" >" -3.8 "</span><span class="p" >]</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="o" >-</span><span class="mi" >3</span><span class="p" >;</span>       <span class="c1" >// including the typecast of strings to numbers</span>
<span class="p" >(</span> <span class="p" >[</span><span class="o" >-</span><span class="mf" >3.8</span><span class="p" >,</span> <span class="mi" >22</span><span class="p" >]</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span>         <span class="c1" >// but an Array with several numbers is typecast to 0</span>
<span class="p" >(</span> <span class="p" >{}</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>                <span class="c1" >// an empty object is typecast to 0</span>
<span class="p" >(</span> <span class="p" >{</span><span class="s1" >'2'</span><span class="p" >:</span><span class="s1" >'3'</span><span class="p" >}</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>         <span class="c1" >// or a not empty object</span>
<span class="p" >(</span> <span class="p" >(</span><span class="kd" >function</span><span class="p" >(){})</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>    <span class="c1" >// an empty function is typecast to 0 too</span>
<span class="p" >(</span> <span class="p" >(</span><span class="kd" >function</span><span class="p" >(){</span> <span class="k" >return</span> <span class="mi" >3</span><span class="p" >;})</span><span class="o" >|</span><span class="mi" >0</span> <span class="p" >)</span> <span class="o" >===</span> <span class="mi" >0</span><span class="p" >;</span>

</code></pre></div><h5 ><a name="replacements-for-raw-mathfloor-endraw-" href="https://dev.to/puritanic/nsfw-use-cases-for-bitwise-operators-in-js-2om5#replacements-for-raw-mathfloor-endraw-" class="anchor" ></a>Replacements for&nbsp;<code >Math.floor()</code>:</h5><div class="highlight" ><pre class="highlight javascript" ><code ><span class="p" >(</span><span class="o" >~~</span><span class="nx" >n</span><span class="p" >)</span>                           
<span class="nx" >n</span><span class="o" >|</span><span class="nx" >n</span>
<span class="nx" >n</span><span class="o" >&amp;</span><span class="nx" >n</span>

<span class="c1" >// Generate random RGB value:</span>
<span class="kd" >var</span> <span class="nx" >r</span> <span class="o" >=</span> <span class="o" >~~</span><span class="p" >(</span><span class="nb" >Math</span><span class="p" >.</span><span class="nx" >random</span><span class="p" >()</span> <span class="o" >*</span> <span class="mi" >255</span><span class="p" >);</span>

<span class="o" >~~</span><span class="kc" >null</span><span class="p" >;</span>      <span class="c1" >// 0</span>
<span class="o" >~~</span><span class="kc" >undefined</span><span class="p" >;</span> <span class="c1" >// 0</span>
<span class="o" >~~</span><span class="mi" >0</span><span class="p" >;</span>         <span class="c1" >// 0</span>
<span class="o" >~~</span><span class="p" >{};</span>        <span class="c1" >// 0</span>
<span class="o" >~~</span><span class="p" >[];</span>        <span class="c1" >// 0</span>
<span class="o" >~~</span><span class="p" >(</span><span class="mi" >1</span><span class="o" >/</span><span class="mi" >0</span><span class="p" >);</span>     <span class="c1" >// 0</span>
<span class="o" >~~</span><span class="kc" >false</span><span class="p" >;</span>     <span class="c1" >// 0</span>
<span class="o" >~~</span><span class="kc" >true</span><span class="p" >;</span>      <span class="c1" >// 1</span>
<span class="o" >~~</span><span class="mf" >1.2543</span><span class="p" >;</span>    <span class="c1" >// 1</span>
<span class="o" >~~</span><span class="mf" >4.9</span><span class="p" >;</span>       <span class="c1" >// 4</span>
<span class="o" >~~</span><span class="p" >(</span><span class="o" >-</span><span class="mf" >2.999</span><span class="p" >);</span>  <span class="c1" >// -2</span>

<span class="c1" >// An example</span>
<span class="kd" >const</span> <span class="nx" >n</span> <span class="o" >=</span> <span class="nb" >Math</span><span class="p" >.</span><span class="nx" >PI</span><span class="p" >;</span>   <span class="c1" >// 3.141592653589793</span>

<span class="nb" >Math</span><span class="p" >.</span><span class="nx" >floor</span><span class="p" >(</span><span class="nx" >n</span><span class="p" >);</span>       <span class="c1" >// 3</span>
<span class="nb" >parseInt</span><span class="p" >(</span><span class="nx" >n</span><span class="p" >,</span> <span class="mi" >10</span><span class="p" >);</span>     <span class="c1" >// 3</span>
<span class="o" >~~</span><span class="nx" >n</span><span class="p" >;</span> <span class="c1" >// 3 </span>
<span class="nx" >n</span><span class="o" >|</span><span class="nx" >n</span><span class="p" >;</span> <span class="c1" >// 3            // n|n and n&amp;n always yield the same results as ~~n</span>
<span class="nx" >n</span><span class="o" >&amp;</span><span class="nx" >n</span><span class="p" >;</span> <span class="c1" >// 3</span>
</code></pre></div><p >It should be noted that of these last three alternatives,&nbsp;<code >n|n</code>&nbsp;<a href="https://jsperf.com/rounding-numbers-down" >appears to be the fastest</a>.</p><p ><code >~~</code>'s flooring capabilities make it a better alternative to&nbsp;<code >Math.floor</code>&nbsp;if you know you’re dealing with positives — it’s faster and takes up fewer characters. It’s not quite as readable though.</p><h5 ><a name="parsing-hexadecimal-value-to-get-rgb-color-values" href="https://dev.to/puritanic/nsfw-use-cases-for-bitwise-operators-in-js-2om5#parsing-hexadecimal-value-to-get-rgb-color-values" class="anchor" ></a>Parsing hexadecimal value to get RGB color values:</h5><div class="highlight" ><pre class="highlight javascript" ><code ><span class="kd" >var</span> <span class="nx" >hex</span> <span class="o" >=</span> <span class="s1" >'ffaadd'</span><span class="p" >;</span>
<span class="kd" >var</span> <span class="nx" >rgb</span> <span class="o" >=</span> <span class="nb" >parseInt</span><span class="p" >(</span><span class="nx" >hex</span><span class="p" >,</span> <span class="mi" >16</span><span class="p" >);</span> <span class="c1" >// rgb value is 16755421 in decimal = 111111111010101011011101 in binary = total 24 bits</span>


<span class="kd" >var</span> <span class="nx" >red</span>   <span class="o" >=</span> <span class="p" >(</span><span class="nx" >rgb</span> <span class="o" >&gt;&gt;</span> <span class="mi" >16</span><span class="p" >)</span> <span class="o" >&amp;</span> <span class="mh" >0xFF</span><span class="p" >;</span> <span class="c1" >// returns 255</span>
<span class="kd" >var</span> <span class="nx" >green</span> <span class="o" >=</span> <span class="p" >(</span><span class="nx" >rgb</span> <span class="o" >&gt;&gt;</span> <span class="mi" >8</span><span class="p" >)</span> <span class="o" >&amp;</span> <span class="mh" >0xFF</span><span class="p" >;</span>  <span class="c1" >// returns 170</span>
<span class="kd" >var</span> <span class="nx" >blue</span>  <span class="o" >=</span> <span class="nx" >rgb</span> <span class="o" >&amp;</span> <span class="mh" >0xFF</span><span class="p" >;</span>         <span class="c1" >// returns 221  </span>

<span class="c1" >// How is it working:</span>

<span class="c1" >// There are two bitwise operations as named SHIFTING and AND operations.</span>
<span class="c1" >// SHIFTING is an operation the bits are shifted toward given direction by adding 0 (zero) bit for vacated bit fields.</span>
<span class="c1" >// AND is an operation which is the same with multiplying in Math. For instance, if 9th bit of the given first bit-set is 0</span>
<span class="c1" >// and 9th bit of the given second bit-set is 1, the new value will be 0 because of 0 x 1 = 0 in math.</span>

<span class="c1" >// 0xFF (000000000000000011111111 in binary) - used for to evaluate only last 8 bits of a given another bit-set by performing bitwise AND (&amp;) operation. </span>
<span class="c1" >// The count of bits is 24 and the first 16 bits of 0xFF value consist of zero (0) value. Rest of bit-set consists of one (1) value.</span>
<span class="nx" >console</span><span class="p" >.</span><span class="nx" >log</span><span class="p" >(</span><span class="s2" >"0xFF </span><span class="err" >\</span><span class="s2" >t</span><span class="err" >\</span><span class="s2" >t</span><span class="err" >\</span><span class="s2" >t</span><span class="err" >\</span><span class="s2" >t: "</span><span class="p" >,</span> <span class="mh" >0xFF</span><span class="p" >)</span> 


<span class="c1" >// 111111111010101011011101 -&gt; bits of rgb variable</span>
<span class="c1" >// 000000000000000011111111 -&gt; 255 after (rgb &gt;&gt; 16) shifting operation</span>
<span class="c1" >// 000000000000000011111111 -&gt; 255 complement (changes the first 16 bits and does nothing for the last 8 bits)</span>
<span class="c1" >// 000000000000000011111111 -&gt; result bits after performing bitwise &amp; operation</span>
<span class="nx" >console</span><span class="p" >.</span><span class="nx" >log</span><span class="p" >(</span><span class="s2" >"Red - (rgb &gt;&gt; 16) &amp; 0xFF </span><span class="err" >\</span><span class="s2" >t: "</span><span class="p" >,</span> <span class="p" >(</span><span class="nx" >rgb</span> <span class="o" >&gt;&gt;</span> <span class="mi" >16</span><span class="p" >)</span> <span class="o" >&amp;</span> <span class="mh" >0xFF</span><span class="p" >)</span> <span class="c1" >// used for to evaluate the first 8 bits</span>

<span class="c1" >// 111111111010101011011101 -&gt; bits of rgb variable</span>
<span class="c1" >// 000000001111111110101010 -&gt; 65450 -&gt; 'ffaa'</span>
<span class="c1" >// 000000000000000011111111 -&gt; 255 complement (changes the first 16 bits and does nothing for the last 8 bits)</span>
<span class="c1" >// 000000000000000010101010 -&gt; result bits after performing bitwise &amp; operation</span>
<span class="c1" >// calculation -&gt; 000000001111111110101010 &amp; 000000000000000011111111 = 000000000000000010101010 = 170 in decimal = 'aa' in hex-decimal</span>
<span class="nx" >console</span><span class="p" >.</span><span class="nx" >log</span><span class="p" >(</span><span class="s2" >"Green - (rgb &gt;&gt; 8) &amp; 0xFF </span><span class="err" >\</span><span class="s2" >t: "</span><span class="p" >,</span> <span class="p" >(</span><span class="nx" >rgb</span> <span class="o" >&gt;&gt;</span> <span class="mi" >8</span><span class="p" >)</span> <span class="o" >&amp;</span> <span class="mh" >0xFF</span><span class="p" >)</span> <span class="c1" >// used for to evaluate the middle 8 bits </span>

<span class="c1" >// 111111111010101011011101 -&gt; 'ffaadd'</span>
<span class="c1" >// 000000000000000011111111 -&gt; 255 complement (changes the first 16 bits and does nothing for the last 8 bits)</span>
<span class="c1" >// 000000000000000011011101 -&gt; result bits after performing bitwise &amp; operation </span>
<span class="c1" >// calculation -&gt; 111111111010101011011101 &amp; 000000000000000011111111 = 221 in decimal = 'dd' in hex-decimal</span>
<span class="nx" >console</span><span class="p" >.</span><span class="nx" >log</span><span class="p" >(</span><span class="s2" >"Blue - rgb &amp; 0xFF </span><span class="err" >\</span><span class="s2" >t</span><span class="err" >\</span><span class="s2" >t: "</span><span class="p" >,</span> <span class="nx" >rgb</span> <span class="o" >&amp;</span> <span class="mh" >0xFF</span><span class="p" >)</span> <span class="c1" >// // used for to evaluate the last 8 bits.</span>

<span class="nx" >console</span><span class="p" >.</span><span class="nx" >log</span><span class="p" >(</span><span class="s2" >"It means that `FFAADD` hex-decimal value specifies the same color with rgb(255, 170, 221)"</span><span class="p" >)</span>

</code></pre></div><h5 ><a name="-raw-endraw-bitwise-xor-as-a-raw-io-endraw-toggler" href="https://dev.to/puritanic/nsfw-use-cases-for-bitwise-operators-in-js-2om5#-raw-endraw-bitwise-xor-as-a-raw-io-endraw-toggler" class="anchor" ></a><code >^</code>&nbsp;bitwise XOR as a&nbsp;<code >I/O</code>&nbsp;toggler</h5><div class="highlight" ><pre class="highlight javascript" ><code ><span class="c1" >// https://stackoverflow.com/a/22061240/7453363</span>
<span class="kd" >function</span> <span class="nx" >toggle</span><span class="p" >(</span><span class="nx" >evt</span><span class="p" >)</span> <span class="p" >{</span>
  <span class="nx" >evt</span><span class="p" >.</span><span class="nx" >target</span><span class="p" >.</span><span class="nx" >IO</span> <span class="o" >^=</span> <span class="mi" >1</span><span class="p" >;</span>                                    <span class="c1" >// Bitwise XOR as 1/0 toggler</span>
  <span class="nx" >evt</span><span class="p" >.</span><span class="nx" >target</span><span class="p" >.</span><span class="nx" >textContent</span> <span class="o" >=</span> <span class="nx" >evt</span><span class="p" >.</span><span class="nx" >target</span><span class="p" >.</span><span class="nx" >IO</span> <span class="p" >?</span> <span class="s2" >"ON"</span> <span class="p" >:</span> <span class="s2" >"OFF"</span><span class="p" >;</span> <span class="c1" >// Unleash your ideas</span>
<span class="p" >}</span>
</code></pre></div><h5 ><a name="check-if-number-is-odd" href="https://dev.to/puritanic/nsfw-use-cases-for-bitwise-operators-in-js-2om5#check-if-number-is-odd" class="anchor" ></a>Check if number is odd:</h5><div class="highlight" ><pre class="highlight javascript" ><code ><span class="kd" >function</span> <span class="nx" >isOdd</span><span class="p" >(</span><span class="nx" >number</span><span class="p" >)</span> <span class="p" >{</span>
    <span class="k" >return</span> <span class="o" >!!</span><span class="p" >(</span><span class="nx" >number</span> <span class="o" >&amp;</span> <span class="mi" >1</span><span class="p" >);</span>
<span class="p" >}</span>

<span class="nx" >isOdd</span><span class="p" >(</span><span class="mi" >1</span><span class="p" >);</span> <span class="c1" >// true, 1 is odd</span>
</code></pre></div><h4 ><a name="check-whether-indexof-returned-1-or-not" href="https://dev.to/puritanic/nsfw-use-cases-for-bitwise-operators-in-js-2om5#check-whether-indexof-returned-1-or-not" class="anchor" ></a>Check whether indexOf returned -1 or not:</h4><div class="highlight" ><pre class="highlight javascript" ><code ><span class="kd" >var</span> <span class="nx" >foo</span> <span class="o" >=</span> <span class="s1" >'abc'</span><span class="p" >;</span>
<span class="o" >!~</span><span class="nx" >foo</span><span class="p" >.</span><span class="nx" >indexOf</span><span class="p" >(</span><span class="s1" >'bar'</span><span class="p" >);</span> <span class="c1" >// true</span>
</code></pre></div><h5 ><a name="flip-a-boolean-value" href="https://dev.to/puritanic/nsfw-use-cases-for-bitwise-operators-in-js-2om5#flip-a-boolean-value" class="anchor" ></a>Flip a boolean value:</h5><div class="highlight" ><pre class="highlight javascript" ><code ><span class="kd" >var</span> <span class="nx" >foo</span> <span class="o" >=</span> <span class="mi" >1</span><span class="p" >;</span>
<span class="kd" >var</span> <span class="nx" >bar</span> <span class="o" >=</span> <span class="mi" >0</span><span class="p" >;</span>

<span class="nx" >foo</span> <span class="o" >^=</span> <span class="mi" >1</span> <span class="c1" >// 0</span>
<span class="nx" >bar</span> <span class="o" >^=</span> <span class="mi" >1</span> <span class="c1" >// 1</span></code></pre></div></body></html>
